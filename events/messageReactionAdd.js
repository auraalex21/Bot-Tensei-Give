import { Events } from "discord.js";

const targetMessageId = "1339253344853692416"; // ID du message o√π la r√©action est attendue
const targetChannelId = "1339231311545503826"; // ID du canal contenant ce message
const roleId = "1340087668616204471"; // ID du r√¥le √† attribuer
const botReactionEmoji = "‚úÖ"; // Emoji ajout√© par le bot

export default {
  name: Events.MessageReactionAdd,
  async execute(client, reaction, user) {
    // ‚ö†Ô∏è Ajout de `client` en premier argument
    try {
      console.log("‚úÖ L'√©v√©nement MessageReactionAdd a bien √©t√© d√©clench√© !");

      // V√©rifier que le bot n'agit pas sur ses propres r√©actions
      if (user.bot) return;

      // V√©rifier si la r√©action est partielle (non en cache) et essayer de la r√©cup√©rer
      if (reaction.partial) {
        try {
          await reaction.fetch();
          console.log("üîÑ R√©action r√©cup√©r√©e avec succ√®s !");
        } catch (err) {
          console.error("‚ùå Impossible de r√©cup√©rer la r√©action :", err);
          return;
        }
      }

      // V√©rifier si le message et le canal sont corrects
      if (
        !reaction.message ||
        reaction.message.id !== targetMessageId ||
        reaction.message.channel.id !== targetChannelId
      ) {
        console.warn(
          "‚ö†Ô∏è R√©action ignor√©e : elle ne concerne pas le bon message ou canal."
        );
        return;
      }

      // V√©rifier si le serveur (guild) existe
      const guild = reaction.message.guild;
      if (!guild) {
        console.error("‚ùå Impossible de r√©cup√©rer le serveur (guild).");
        return;
      }

      // V√©rifier si le bot a bien acc√®s au client
      if (!client) {
        console.error(
          "‚ùå Client Discord toujours ind√©fini ! V√©rifie que :\n" +
            "- Les intents sont activ√©s dans le portail Discord Developer.\n" +
            "- Les intents sont activ√©s dans ton code (`GatewayIntentBits`).\n" +
            "- Le bot a bien les permissions dans le serveur."
        );
        return;
      }

      // R√©cup√©rer le membre correspondant √† l'utilisateur qui a r√©agi
      const member = await guild.members.fetch(user.id).catch((err) => {
        console.error("‚ùå Erreur lors de la r√©cup√©ration du membre :", err);
        return null;
      });

      if (!member) {
        console.error(`‚ùå Impossible de r√©cup√©rer l'utilisateur : ${user.tag}`);
        return;
      }

      // V√©rifier que le r√¥le existe
      const role = guild.roles.cache.get(roleId);
      if (!role) {
        console.error(`‚ùå R√¥le avec l'ID ${roleId} non trouv√©.`);
        return;
      }

      // Ajouter le r√¥le √† l'utilisateur
      await member.roles.add(role).catch((err) => {
        console.error(`‚ùå Erreur lors de l'ajout du r√¥le √† ${user.tag} :`, err);
        return;
      });

      console.log(
        `‚úÖ R√¥le "${role.name}" attribu√© √† l'utilisateur ${user.tag}.`
      );

      // Ajouter la r√©action du bot au message pour confirmer
      try {
        await reaction.message.react(botReactionEmoji);
        console.log(`‚úÖ R√©action "${botReactionEmoji}" ajout√©e au message.`);
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'ajout de la r√©action :`, error);
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors du traitement de la r√©action :`, error);
    }
  },
};
